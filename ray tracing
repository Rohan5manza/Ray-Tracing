# RAY TRACING FROM SCRATCH IN PYTHON: ARTICLE ON MEDIUM


# Pseudo Code:-
# for each pixel p(x,y,z) of the screen:
   # associate a black color to p
   # if the ray (line) that starts at camera and goes towards p intersects any object of the scene then:
    #    calculate the intersection point to the nearest object
     #   if there is no object of the scene in-between the intersection point and the light then:
      #      calculate the color of the intersection point
       #     associate the color of the intersection point to p



#the skeleton :
from winreg import DisableReflectionKey
import numpy as np
import matplotlib.pyplot as plt

width=300
height=200

camera=np.array([0,0,1])
ratio= float(width/height)
screen=(-1,1/ratio,1,-1/ratio)#left,top,right,bottom.... # because we want screen to have same aspect ratio as the actual image

image=np.zeros((height,width,3))
for i,y in enumerate(np.linspace(screen[1],screen[3],height)):
    for j,x in enumerate(np.linspace(screen[0],screen[2],width)):
        print("progress: %d/%d" %(i+1,height))

plt.imsave('image.png', image)    

# Code for ray :

def normalize(vector):  # normalizing means finding unit vector of a vector in a given direction
    return vector/np.linalg.norm(vector) #np.linalg.norm is a function that returns one of eight different matrix norms

    for i,y in enumerate(np.linspace(screen[1],screen[3],height)):
        for j,x in enumerate(np.linspace(screen[0],screen[2],width)):
            pixel=np.array([x,y,0])
            origin=camera
            direction=normalize(pixel-origin)

            #image[i,j]=.....

        print("progress:%d %d"% (i+1,height))

    plt.imsave('image.png',image)


#definition of sphere

object=[
    {'center':np.array([-0.2,0,-1]),'radius':0.7}]

#code to detect intersection between ray and sphere
def sphere_intersect(center,radius,ray_origin,ray_direction):
    b=2*np.dot(ray_direction,ray_origin-center) # returns dot product(matrix multiplication) of two vectors
    c=np.linalg.norm(ray_origin-center)**2- radius**2
    delta=b**2-4*c # Quadratic equation derived by sphere and ray intersection. as ray is unit vector, a=1
    
    if delta>0:
        t1=(-b +np.sqrt(delta))/2
        t2=(-b-np.sqrt(delta))/2

        if t1>0 and t2>0:
            return min(t1,t2)

    return None        


#code for nearest intersected object

def nearest_intersected_object(objects,ray_origin,ray_direction):
    distances=[sphere_intersect(obj['center'],obj['radius'],ray_origin,ray_direction) for obj in objects]
    nearest_object=None
    min_distance=np.inf # this is used to represent positive and negative infinity

    for index,distance in enumerate(distances):
        if distance and distance<min_distance:
            min_distance=distance
            nearest_object=objects[index]
    return nearest_object,min_distance



intersection=origin + min_distance*direction 

normal_to_surface = normalize(intersection - nearest_object['center'])
shifted_point = intersection + 1e-5 * normal_to_surface
intersection_to_light = normalize(light['position'] - shifted_point)

_, min_distance = nearest_intersected_object(objects, shifted_point, intersection_to_light)
intersection_to_light_distance = np.linalg.norm(light['position'] - intersection)
is_shadowed = min_distance < intersection_to_light_distance

if is_shadowed:
    continue


# Blinn-Phong Reflection Model: 
